name: Opex Dashboard api-pagopa-proxy

# Controls when the workflow will run
on:
  push:
    branches:
      - main
    paths:
      - 'api-spec/api-pagopa-proxy.yaml'
      - '.github/workflows/opex_api.yml'
      - '.opex/api-selfcare-product/**'
  workflow_dispatch:

env:
  TEMPLATE_DIR: azure-dashboard
  CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_CD }}
  TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  API_NAME: api-selfcare-product

permissions:
  id-token: write
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        environment: [ dev-cd ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        id: checkout
        # from https://github.com/actions/checkout/commits/main
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Read terraform version
        id: read-version
        shell: bash
        run: |
          echo "TERRAFORM_VERSION=`cat .terraform-version`" >> $GITHUB_ENV

      - name: Setup Terraform
        # from https://github.com/hashicorp/setup-terraform/commits/main
        uses: hashicorp/setup-terraform@69c00852f1304c321337f45a105731218c2d5544
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Login
        id: login
        # from https://github.com/Azure/login/commits/master
        #          uses: azure/login@de95379fe4dadc2defb305917eaa7e5dde727294
        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID_CD }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # this action create a folder named /azure-dashboard
      - uses: pagopa/opex-dashboard-action@main
        with:
          template: ${{ env.TEMPLATE_DIR }}

      # we need to set env variables in the folder /azure-dashboard
      - name: Copy Environments
        run: |
          cp -R .opex/${API_NAME}/env ./${TEMPLATE_DIR}

      # now is possible to launch the command: terraform apply
      - name: Terraform Apply
        shell: bash
        run: |
          cd ./${TEMPLATE_DIR}
          export ARM_CLIENT_ID="${CLIENT_ID}"
          export ARM_SUBSCRIPTION_ID=$(az account show --query id --output tsv)
          export ARM_TENANT_ID=$(az account show --query tenantId --output tsv)
          export ARM_USE_OIDC=true

          bash ./terraform.sh apply ${{ matrix.environment }} -auto-approve
